{"ast":null,"code":"var _jsxFileName = \"E:\\\\DATN_2020\\\\src\\\\components\\\\common\\\\barchart.js\";\nimport React from 'react';\nimport Chart from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport Link from '../common/link';\nChart.helpers.merge(Chart.defaults.global.plugins.datalabels, {\n  color: '#FE777B'\n});\nChart.plugins.register(ChartDataLabels);\nexport default class DonutChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chartRef = React.createRef();\n    this.color = Chart.helpers.color;\n\n    this.onCreateChart = () => {\n      const myChartRef = this.chartRef.current.getContext('2d');\n      const {\n        data,\n        labels,\n        backgroundColor\n      } = this.props;\n      this.myChart = new Chart(myChartRef, {\n        type: 'bar',\n        data: {\n          datasets: [{\n            backgroundColor: this.color(backgroundColor[0]).rgbString(),\n            borderColor: backgroundColor[0],\n            borderWidth: 1,\n            label: labels[0],\n            data: [data[0]],\n            maxBarThickness: 40,\n            datalabels: {\n              anchor: 'end'\n            }\n          }, {\n            backgroundColor: this.color(backgroundColor[1]).rgbString(),\n            borderColor: backgroundColor[1],\n            borderWidth: 1,\n            maxBarThickness: 40,\n            label: labels[1],\n            data: [data[1]],\n            datalabels: {\n              anchor: 'end'\n            }\n          }]\n        },\n        options: {\n          maintainAspectRatio: false,\n          animation: {\n            animateSacale: true\n          },\n          responsive: true,\n          legend: {\n            position: 'bottom',\n            display: true,\n            labels: {\n              padding: 20\n            }\n          },\n          layout: {\n            padding: {\n              left: 0,\n              right: 0,\n              top: 20,\n              bottom: 20\n            }\n          },\n          plugins: {\n            datalabels: {\n              backgroundColor: function (context) {\n                return context.dataset.backgroundColor;\n              },\n              borderColor: 'white',\n              borderRadius: 25,\n              borderWidth: 2,\n              color: 'white',\n              display: true,\n              font: {\n                weight: 'bold'\n              },\n              formatter: Math.round\n            }\n          }\n        }\n      });\n    };\n\n    this.onUpdateChart = data => {\n      this.myChart.data.datasets[0].data[0] = data[0];\n      this.myChart.data.datasets[1].data[0] = data[1];\n      this.myChart.update();\n    };\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.onCreateChart();\n  }\n\n  componentDidUpdate() {\n    this.onCreateChart();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: styles.chartContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      title: this.props.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: styles.chartContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\nconst styles = {\n  chartContainer: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  chartContent: {\n    width: '80%',\n    height: '80%'\n  }\n};","map":{"version":3,"sources":["E:/DATN_2020/src/components/common/barchart.js"],"names":["React","Chart","ChartDataLabels","Link","helpers","merge","defaults","global","plugins","datalabels","color","register","DonutChart","Component","constructor","props","chartRef","createRef","onCreateChart","myChartRef","current","getContext","data","labels","backgroundColor","myChart","type","datasets","rgbString","borderColor","borderWidth","label","maxBarThickness","anchor","options","maintainAspectRatio","animation","animateSacale","responsive","legend","position","display","padding","layout","left","right","top","bottom","context","dataset","borderRadius","font","weight","formatter","Math","round","onUpdateChart","update","state","componentDidMount","componentDidUpdate","render","styles","chartContainer","title","chartContent","width","height","flexDirection","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Chart from 'chart.js'\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels'\r\nimport Link from '../common/link'\r\n\r\nChart.helpers.merge(Chart.defaults.global.plugins.datalabels, {\r\n    color: '#FE777B'\r\n});\r\nChart.plugins.register(ChartDataLabels)\r\n\r\nexport default class DonutChart extends React.Component {\r\n    myChart;\r\n    chartRef = React.createRef();\r\n    color = Chart.helpers.color;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    onCreateChart = () => {\r\n        const myChartRef = this.chartRef.current.getContext('2d');\r\n        const { data, labels, backgroundColor } = this.props;\r\n\r\n\r\n\r\n        this.myChart = new Chart(myChartRef, {\r\n            type: 'bar',\r\n            data: {\r\n                datasets: [\r\n                    {\r\n                        backgroundColor: this.color(backgroundColor[0]).rgbString(),\r\n                        borderColor: backgroundColor[0],\r\n                        borderWidth: 1,\r\n                        label: labels[0],\r\n                        data: [data[0]],\r\n                        maxBarThickness: 40,\r\n                        datalabels: {\r\n                            anchor: 'end',\r\n                        }\r\n                    },\r\n                    {\r\n                        backgroundColor: this.color(backgroundColor[1]).rgbString(),\r\n                        borderColor: backgroundColor[1],\r\n                        borderWidth: 1,\r\n                        maxBarThickness: 40,\r\n                        label: labels[1],\r\n                        data: [data[1]],\r\n                        datalabels: {\r\n                            anchor: 'end',\r\n                        }\r\n                    }\r\n                ],\r\n            },\r\n            options: {\r\n                maintainAspectRatio: false,\r\n                animation: {\r\n                    animateSacale: true,\r\n                },\r\n                responsive: true,\r\n                legend: {\r\n                    position: 'bottom',\r\n                    display: true,\r\n                    labels: {\r\n                        padding: 20,\r\n                    },\r\n                },\r\n                layout: {\r\n                    padding: {\r\n                        left: 0,\r\n                        right: 0,\r\n                        top: 20,\r\n                        bottom: 20,\r\n                    }\r\n                },\r\n                plugins: {\r\n                    datalabels: {\r\n                        backgroundColor: function (context) {\r\n                            return context.dataset.backgroundColor;\r\n                        },\r\n                        borderColor: 'white',\r\n                        borderRadius: 25,\r\n                        borderWidth: 2,\r\n                        color: 'white',\r\n                        display: true,\r\n                        font: {\r\n                            weight: 'bold'\r\n                        },\r\n                        formatter: Math.round\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onCreateChart();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.onCreateChart();\r\n    }\r\n\r\n    onUpdateChart = (data) => {\r\n        this.myChart.data.datasets[0].data[0] = data[0];\r\n        this.myChart.data.datasets[1].data[0] = data[1];\r\n        this.myChart.update();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={styles.chartContainer}>\r\n                <Link title={this.props.title} />\r\n                <div style={styles.chartContent}>\r\n                    <canvas ref={this.chartRef} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = {\r\n\r\n    chartContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n\r\n    chartContent: {\r\n        width: '80%',\r\n        height: '80%',\r\n    },\r\n}"]},"metadata":{},"sourceType":"module"}