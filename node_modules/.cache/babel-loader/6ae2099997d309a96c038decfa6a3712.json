{"ast":null,"code":"var _jsxFileName = \"E:\\\\DATN_2020\\\\src\\\\components\\\\content\\\\home.js\";\nimport React from 'react';\nimport DonutChart from '../common/donutchart';\nimport BarChart from '../common/barchart';\nimport Statistical from '../../core/statistical';\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.donutLabel1 = [\"Tủ trống\", \"Tủ đang sử dụng\", \"Tủ bị vô hiệu hoá\"];\n    this.donutLabel2 = [\"Tủ hoạt động bình thường\", \"Tủ có lỗi kỹ thuật\", \"Không rõ\"];\n    this.chartLabel3 = [\"Xâm phạm trái phép\", \"Thiết bị mất kết nối\"];\n    this.chartColors = {\n      red: 'rgb(255, 99, 132)',\n      orange: 'rgb(255, 159, 64)',\n      yellow: 'rgb(255, 205, 86)',\n      green: 'rgb(75, 192, 192)',\n      blue: 'rgb(54, 162, 235)',\n      purple: 'rgb(153, 102, 255)',\n      grey: 'rgb(231,233,237)'\n    };\n    this.titles = {\n      chart1: 'Thống kê tình trạng sử dụng tủ',\n      chart2: 'Thống kê tình trạng sức khoẻ tủ',\n      chart3: 'Thống kê cảnh báo'\n    };\n    this.backgroundColors = {\n      backgroundColor1: ['#2980b9', \"#e30613\", \"#aaa\"],\n      backgroundColor2: ['#16a085', '#e67e22', '#bababa'],\n      backgroundColor3: [this.chartColors.red, this.chartColors.blue]\n    };\n    this.chart1 = [];\n    this.chart2 = [];\n    this.chart3 = [];\n\n    this.updateChart = isFirstCall => {\n      Statistical.getStatisticalDataRequest().then(data => {\n        this.chart1 = data.items1;\n        this.chart2 = data.items2;\n        this.chart3 = data.items3;\n\n        if (isFirstCall) {\n          this.setState({\n            isUpdateChart: !this.state.isUpdateChart\n          });\n        } else {\n          if (typeof this.chart1Ref !== 'undefined') {\n            this.chart1Ref.current.onUpdateChart(this.chart1);\n          }\n\n          if (typeof this.chart2Ref !== 'undefined') {\n            this.chart2Ref.current.onUpdateChart(this.chart2);\n          }\n\n          if (typeof this.chart3Ref !== 'undefined') {\n            this.chart3Ref.current.onUpdateChart(this.chart3);\n          }\n        }\n      });\n    };\n\n    this.state = {\n      intevalId: 0,\n      isUpdateChart: false\n    };\n    this.chart1Ref = React.createRef();\n    this.chart2Ref = React.createRef();\n    this.chart3Ref = React.createRef();\n  }\n\n  componentDidMount() {\n    this.updateChart(true);\n    let id = setInterval(() => {\n      this.updateChart(false);\n    }, 15000);\n    this.setState({\n      intevalId: id\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.intevalId);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: styles.homeContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: styles.topLeftChart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DonutChart, {\n      data: this.chart1,\n      labels: this.donutLabel1,\n      backgroundColor: this.backgroundColors.backgroundColor1,\n      title: this.titles.chart1,\n      ref: this.chart1Ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: styles.topRightChart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DonutChart, {\n      data: this.chart2,\n      labels: this.donutLabel2,\n      backgroundColor: this.backgroundColors.backgroundColor2,\n      title: this.titles.chart2,\n      ref: this.chart2Ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: styles.bottomChart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BarChart, {\n      data: this.chart3,\n      labels: this.chartLabel3,\n      backgroundColor: this.backgroundColors.backgroundColor3,\n      title: this.titles.chart3,\n      ref: this.chart3Ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\nconst styles = {\n  homeContainer: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  topLeftChart: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '50%',\n    height: '50%'\n  },\n  topRightChart: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '50%',\n    height: '50%'\n  },\n  bottomChart: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '50%',\n    height: '50%'\n  }\n};","map":{"version":3,"sources":["E:/DATN_2020/src/components/content/home.js"],"names":["React","DonutChart","BarChart","Statistical","Home","Component","constructor","props","donutLabel1","donutLabel2","chartLabel3","chartColors","red","orange","yellow","green","blue","purple","grey","titles","chart1","chart2","chart3","backgroundColors","backgroundColor1","backgroundColor2","backgroundColor3","updateChart","isFirstCall","getStatisticalDataRequest","then","data","items1","items2","items3","setState","isUpdateChart","state","chart1Ref","current","onUpdateChart","chart2Ref","chart3Ref","intevalId","createRef","componentDidMount","id","setInterval","componentWillUnmount","clearInterval","render","styles","homeContainer","topLeftChart","topRightChart","bottomChart","width","height","display","flexWrap","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport DonutChart from '../common/donutchart'\r\nimport BarChart from '../common/barchart'\r\nimport Statistical from '../../core/statistical'\r\n\r\nexport default class Home extends React.Component {\r\n    donutLabel1 = [\"Tủ trống\", \"Tủ đang sử dụng\", \"Tủ bị vô hiệu hoá\"];\r\n    donutLabel2 = [\"Tủ hoạt động bình thường\", \"Tủ có lỗi kỹ thuật\", \"Không rõ\"]\r\n    chartLabel3 = [\"Xâm phạm trái phép\", \"Thiết bị mất kết nối\"]\r\n    chartColors = {\r\n        red: 'rgb(255, 99, 132)',\r\n        orange: 'rgb(255, 159, 64)',\r\n        yellow: 'rgb(255, 205, 86)',\r\n        green: 'rgb(75, 192, 192)',\r\n        blue: 'rgb(54, 162, 235)',\r\n        purple: 'rgb(153, 102, 255)',\r\n        grey: 'rgb(231,233,237)'\r\n    };\r\n\r\n    titles = {\r\n        chart1: 'Thống kê tình trạng sử dụng tủ',\r\n        chart2: 'Thống kê tình trạng sức khoẻ tủ',\r\n        chart3: 'Thống kê cảnh báo',\r\n    }\r\n\r\n    backgroundColors = {\r\n        backgroundColor1: ['#2980b9', \"#e30613\", \"#aaa\"],\r\n        backgroundColor2: ['#16a085', '#e67e22', '#bababa'],\r\n        backgroundColor3: [this.chartColors.red, this.chartColors.blue]\r\n    }\r\n\r\n    chart1 = [];\r\n    chart2 = [];\r\n    chart3 = [];\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            intevalId: 0,\r\n            isUpdateChart: false\r\n        };\r\n        this.chart1Ref = React.createRef();\r\n        this.chart2Ref = React.createRef();\r\n        this.chart3Ref = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateChart(true);\r\n        let id = setInterval(() => {\r\n            this.updateChart(false);\r\n        }, (15000));\r\n        this.setState({\r\n            intevalId: id\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.intevalId);\r\n    }\r\n\r\n    updateChart = (isFirstCall) => {\r\n        Statistical.getStatisticalDataRequest()\r\n        .then((data) => {\r\n            this.chart1 = data.items1;\r\n            this.chart2 = data.items2;\r\n            this.chart3 = data.items3;\r\n            if (isFirstCall) {\r\n                this.setState({\r\n                    isUpdateChart: !this.state.isUpdateChart\r\n                })\r\n            }\r\n            else {\r\n                if (typeof (this.chart1Ref) !== 'undefined') {\r\n                    this.chart1Ref.current.onUpdateChart(this.chart1);\r\n                }\r\n                if (typeof (this.chart2Ref) !== 'undefined') {\r\n                    this.chart2Ref.current.onUpdateChart(this.chart2);\r\n                }\r\n                if (typeof (this.chart3Ref) !== 'undefined') {\r\n                    this.chart3Ref.current.onUpdateChart(this.chart3);\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={styles.homeContainer}>\r\n                <div style={styles.topLeftChart}>\r\n                    <DonutChart data={this.chart1}\r\n                        labels={this.donutLabel1}\r\n                        backgroundColor={this.backgroundColors.backgroundColor1}\r\n                        title={this.titles.chart1}\r\n                        ref={this.chart1Ref} />\r\n                </div>\r\n                <div style={styles.topRightChart}>\r\n                    <DonutChart data={this.chart2}\r\n                        labels={this.donutLabel2}\r\n                        backgroundColor={this.backgroundColors.backgroundColor2}\r\n                        title={this.titles.chart2}\r\n                        ref={this.chart2Ref} />\r\n                </div>\r\n                <div style={styles.bottomChart}>\r\n                    <BarChart data={this.chart3}\r\n                        labels={this.chartLabel3}\r\n                        backgroundColor={this.backgroundColors.backgroundColor3}\r\n                        title={this.titles.chart3}\r\n                        ref={this.chart3Ref} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    homeContainer: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n\r\n    topLeftChart: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '50%',\r\n        height: '50%',\r\n    },\r\n\r\n    topRightChart: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '50%',\r\n        height: '50%',\r\n    },\r\n    bottomChart: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '50%',\r\n        height: '50%',\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}