{"ast":null,"code":"import { ApiUri, server } from '../staticresources/resources';\n\nclass Buildings {\n  constructor() {\n    this.createBuilding = async (name = '', addr = '', des = '') => {\n      try {\n        let url = ApiUri.building.createBuilding.uri;\n        let form = {\n          'token': localStorage.getItem('crfs'),\n          'name': name,\n          'addr': addr,\n          'des': des\n        };\n        return await fetch(url, {\n          method: ApiUri.building.createBuilding.method,\n          cache: 'no-cache',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + localStorage.getItem('token')\n          },\n          referrerPolicy: 'no-referrer',\n          body: JSON.stringify(form)\n        }).then(response => response.json()).catch(console.error);\n      } catch {}\n    };\n\n    this.getBuilding = async (bId = 0, name = '', addr = '', page = 0) => {\n      try {\n        let url = ApiUri.building.getBuilding.uri;\n        url += '?token=' + localStorage.getItem('crfs');\n        url += '&name=' + name;\n        url += '&addr=' + addr;\n        url += '&bId=' + bId;\n        url += '&page=' + page;\n        return await fetch(url, {\n          method: ApiUri.building.getBuilding.method,\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`,\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Headers': '*'\n          }\n        }).then(response => response.json()).catch(console.error);\n      } catch {}\n    };\n\n    this.editBuilding = async (bId = 0, name = '', addr = '', des = '') => {\n      try {\n        let url = ApiUri.building.editBuilding.uri;\n        let form = {\n          'token': localStorage.getItem('crfs'),\n          'bId': bId,\n          'name': name,\n          'addr': addr,\n          'des': des\n        };\n        return await fetch(url, {\n          method: ApiUri.building.editBuilding.method,\n          mode: 'cors',\n          cache: 'no-cache',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + localStorage.getItem('token')\n          },\n          referrerPolicy: 'no-referrer',\n          body: JSON.stringify(form)\n        }).then(response => response.json()).catch(console.error);\n      } catch {}\n    };\n\n    this.removeBuilding = async (bId = 0) => {\n      try {\n        let url = ApiUri.building.removeBuilding.uri;\n        let form = {\n          'token': localStorage.getItem('crfs'),\n          'bId': bId\n        };\n        return await fetch(url, {\n          method: ApiUri.building.removeBuilding.method,\n          // mode: 'cors',\n          headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Headers': '*',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + localStorage.getItem('token')\n          },\n          referrerPolicy: 'no-referrer',\n          body: JSON.stringify(form)\n        }).then(response => response.json()).catch(console.error);\n      } catch {}\n    };\n  }\n\n}\n\nvar Building = new Buildings();\nexport default Building;","map":{"version":3,"sources":["E:/DATN_2020/src/core/building.js"],"names":["ApiUri","server","Buildings","createBuilding","name","addr","des","url","building","uri","form","localStorage","getItem","fetch","method","cache","headers","referrerPolicy","body","JSON","stringify","then","response","json","catch","console","error","getBuilding","bId","page","editBuilding","mode","removeBuilding","Building"],"mappings":"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","sourcesContent":["import { ApiUri, server } from '../staticresources/resources'\r\n\r\nclass Buildings {\r\n\r\n    createBuilding = async (name = '',addr= '', des= '') => {\r\n        try {\r\n            let url = ApiUri.building.createBuilding.uri;\r\n\r\n            let form = {\r\n                'token': localStorage.getItem('crfs'),\r\n                'name': name,\r\n                'addr': addr,\r\n                'des': des,\r\n            }\r\n\r\n            return await fetch(url, {\r\n                method: ApiUri.building.createBuilding.method,\r\n                cache: 'no-cache',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                },\r\n                referrerPolicy: 'no-referrer',\r\n                body: JSON.stringify(form)\r\n            }).then(response => response.json())\r\n                .catch(console.error);\r\n        }\r\n        catch{ }\r\n\r\n    }\r\n\r\n    getBuilding = async (bId = 0, name = '', addr = '', page = 0) => {\r\n        try {\r\n            let url = ApiUri.building.getBuilding.uri;\r\n            url += '?token=' + localStorage.getItem('crfs');\r\n            url += '&name=' + name;\r\n            url += '&addr=' + addr;\r\n            url += '&bId=' + bId;\r\n            url += '&page=' + page;\r\n\r\n            return await fetch(url, {\r\n                method: ApiUri.building.getBuilding.method,\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    'Access-Control-Allow-Headers': '*',\r\n                },\r\n            })\r\n                .then(response => response.json())\r\n                .catch(console.error);\r\n        }\r\n        catch{ }\r\n    }\r\n\r\n    editBuilding = async (bId = 0, name = '', addr = '', des = '') => {\r\n        try {\r\n            let url = ApiUri.building.editBuilding.uri;\r\n\r\n            let form = {\r\n                'token': localStorage.getItem('crfs'),\r\n                'bId': bId,\r\n                'name': name,\r\n                'addr': addr,\r\n                'des': des,\r\n            }\r\n\r\n            return await fetch(url, {\r\n                method: ApiUri.building.editBuilding.method,\r\n                mode: 'cors',\r\n                cache: 'no-cache',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                },\r\n                referrerPolicy: 'no-referrer',\r\n                body: JSON.stringify(form)\r\n            }).then(response => response.json())\r\n                .catch(console.error);\r\n        }\r\n        catch{ }\r\n\r\n    }\r\n\r\n    removeBuilding = async (bId = 0) => {\r\n        try {\r\n            let url = ApiUri.building.removeBuilding.uri;\r\n\r\n            let form = {\r\n                'token': localStorage.getItem('crfs'),\r\n                'bId': bId,\r\n            }\r\n            return await fetch(url, {\r\n                method: ApiUri.building.removeBuilding.method,\r\n                // mode: 'cors',\r\n                headers: {\r\n                    'Access-Control-Allow-Origin': '*',\r\n                    'Access-Control-Allow-Headers': '*',\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                },\r\n                referrerPolicy: 'no-referrer',\r\n                body: JSON.stringify(form)\r\n            }).then(response => response.json())\r\n                .catch(console.error)\r\n        }\r\n        catch{ }\r\n\r\n    }\r\n\r\n}\r\n\r\nvar Building = new Buildings();\r\nexport default Building;"]},"metadata":{},"sourceType":"module"}