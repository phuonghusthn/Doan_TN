{"ast":null,"code":"import { ApiUri, server } from '../staticresources/resources';\n\nclass Reports {\n  constructor() {\n    this.getStatusReport = async (bId = 0, lId = '', imei = '', lLabel = '', lStatus = 0, page = 1) => {\n      try {\n        let url = ApiUri.report.statusReport.uri;\n        url += '?bId=' + bId;\n        url += '&token=' + localStorage.getItem('crfs');\n        url += '&lId=' + lId;\n        url += '&imei=' + imei;\n        url += '&lLabel=' + lLabel;\n        url += '&lStatus=' + lStatus;\n        url += '&page=' + page;\n        return await fetch(url, {\n          method: ApiUri.report.statusReport.method,\n          headers: {\n            'Authorization': 'Bearer ' + localStorage.getItem('token')\n          }\n        }).then(response => response.json()).catch(console.error);\n      } catch {}\n    };\n\n    this.getHistoryReport = async (bId = 0, lId = '', imei = '', lLabel = '', eName = '', eCode = '', sDate = '', eDate = '', page = 1) => {\n      try {\n        let url = ApiUri.report.historyReport.uri;\n        url += '?bId=' + bId;\n        url += '&token=' + localStorage.getItem('crfs');\n        url += '&lId=' + lId;\n        url += '&imei=' + imei;\n        url += '&lLabel=' + lLabel;\n        url += '&eName=' + eName;\n        url += '&eCode=' + eCode;\n        url += '&sDate=' + sDate;\n        url += '&eDate=' + eDate;\n        url += '&page=' + page;\n        return await fetch(url, {\n          method: ApiUri.report.historyReport.method,\n          headers: {\n            'Authorization': 'Bearer ' + localStorage.getItem('token')\n          }\n        }).then(response => response.json()).catch(console.error);\n      } catch {}\n    };\n\n    this.getRealTimeReport = async () => {\n      try {\n        let url = ApiUri.report.eventReport.uri;\n        url += '?token=' + localStorage.getItem('crfs');\n        return await fetch(url, {\n          method: ApiUri.report.eventReport.method,\n          headers: {\n            'Authorization': 'Bearer ' + localStorage.getItem('token')\n          }\n        }).then(response => response.json()).catch(console.error);\n      } catch {}\n    };\n  }\n\n}\n\nvar Report = new Reports();\nexport default Report;","map":{"version":3,"sources":["E:/DATN_2020/src/core/report.js"],"names":["ApiUri","server","Reports","getStatusReport","bId","lId","imei","lLabel","lStatus","page","url","report","statusReport","uri","localStorage","getItem","fetch","method","headers","then","response","json","catch","console","error","getHistoryReport","eName","eCode","sDate","eDate","historyReport","getRealTimeReport","eventReport","Report"],"mappings":"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","sourcesContent":["import { ApiUri, server } from '../staticresources/resources'\r\n\r\nclass Reports {\r\n    getStatusReport = async (bId = 0, lId = '', imei = '', lLabel = '', lStatus = 0, page = 1) => {\r\n        try {\r\n            let url = ApiUri.report.statusReport.uri\r\n            url += '?bId=' + bId;\r\n            url += '&token=' + localStorage.getItem('crfs');\r\n            url += '&lId=' + lId;\r\n            url += '&imei=' + imei;\r\n            url += '&lLabel=' + lLabel;\r\n            url += '&lStatus=' + lStatus;\r\n            url += '&page=' + page;\r\n\r\n            return await fetch(url, {\r\n                method: ApiUri.report.statusReport.method,\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                }\r\n            })\r\n                .then(response => response.json())\r\n                .catch(console.error);\r\n        }\r\n        catch{ }\r\n    }\r\n\r\n    getHistoryReport = async (bId = 0, lId = '', imei = '', lLabel = '', eName = '', eCode = '', sDate = '', eDate = '', page = 1) => {\r\n        try {\r\n            let url = ApiUri.report.historyReport.uri\r\n            url += '?bId=' + bId;\r\n            url += '&token=' + localStorage.getItem('crfs');\r\n            url += '&lId=' + lId;\r\n            url += '&imei=' + imei;\r\n            url += '&lLabel=' + lLabel;\r\n            url += '&eName=' + eName;\r\n            url += '&eCode=' + eCode;\r\n            url += '&sDate=' + sDate;\r\n            url += '&eDate=' + eDate;\r\n            url += '&page=' + page;\r\n\r\n            return await fetch(url, {\r\n                method: ApiUri.report.historyReport.method,\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                }\r\n            })\r\n                .then(response => response.json())\r\n                .catch(console.error);\r\n        }\r\n        catch{ }\r\n    }\r\n\r\n    getRealTimeReport = async () => {\r\n        try {\r\n            let url = ApiUri.report.eventReport.uri;\r\n            url += '?token=' + localStorage.getItem('crfs');\r\n\r\n            return await fetch(url, {\r\n                method: ApiUri.report.eventReport.method,\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                }\r\n            })\r\n                .then(response => response.json())\r\n                .catch(console.error);\r\n        }\r\n        catch{ }\r\n\r\n    }\r\n}\r\n\r\nvar Report = new Reports();\r\nexport default Report;"]},"metadata":{},"sourceType":"module"}